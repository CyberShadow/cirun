# cirun configuration file.
# Lines starting with ; or # are ignored.

# cirun will load configuration from "cirun.conf",
# or all *.conf files from "cirun.conf.d", if it exists.


##############################################################################
# Global options

# The directory for persistent storage, where test results and files
# will be saved. The default is "./cirun-data/".
; dataDir = /home/cirun/data

# The directory for working files, where cloned repositories will be
# stored. The contents of this directory need not remain available
# across reboots and benefits from being on a fast filesystem (tmpfs
# or SSD).
# If unset (the default), a new directory will be created under the
# system's directory for temporary files (e.g. /tmp).
# Can be the same path as dataDir.
; workDir = /home/cirun/work

# Specifies the external URL prefix.
# This will be used to generate URLs to cirun, e.g. for status pages.
# If unset (the default), the URL prefix will be inferred from incoming
# HTTP requests or server settings (when possible).
; externalUrlPrefix = https://dev.initech.com/cirun/

# Specifies the maximum number of jobs to run in parallel.
# Any job requests exceeding this limit are queued.
# The default is the number of logical CPUs on the current system.
; maxParallelJobs = 10


##############################################################################
# Server options

# cirun can accept HTTP requests to process webhooks, and allow
# viewing execution status and logs.  cirun can also be used without a
# server (the default), with these features being unavailable.

# The server functionality of cirun can be configured in a rich
# variety of ways, supporting CGI, FastCGI (both via direct execution
# or as a stand-alone process), and pure HTTP (with or without SSL).

# You can specify any (unique) string as a server configuration name
# instead of "main".
; [server.main]

# How cirun receives connections.
# Can be set to:
# - inet - listen for TCP connections on an Internet address/port
#     (default)
# - unix - listen for connections on an UNIX domain socket
# - stdin - requests are read from standard input, responses are sent
#     to standard output (used by FastCGI and e.g. systemd sockets
#     with Listen=no)
# - accept - accept connections from file descriptor 0
#     (used by FastCGI and e.g. systemd sockets with Listen=yes)
; transport = inet

# Protocol for the connection stream.
# Can be set to:
# - http - HTTP 1.1 (default)
# - cgi - CGI (transport must be set to "stdin")
# - fastcgi - FastCGI (transport must be "accept", "inet", or "unix")
; protocol = http

# The IP address to bind to. Used when transport = inet.
# The default is to bind to all interfaces.
; listen.addr = 127.0.0.1

# The TCP port to listen on. Used when transport = inet.
# By default, a random free port will be chosen on each execution.
; listen.port = 8000

# Specifies the path to the UNIX socket to create.
# Used when transport = unix.
; listen.socketPath = cirun.sock

# Whether to emit responses in Non-Parsed Headers mode when handling
# CGI/FastCGI requests. If set, protocol must be "cgi" or "fastcgi".
# The default is to auto-detect based on the binary name.
; nph = true

# If specified, use HTTP with TLS (HTTPS).
# Specifies the paths to the server certificate and private key, in
# PEM format.
# cirun must be built with SSL support (disabled by default, to avoid
# the OpenSSL dependency).
; ssl.cert = server.crt
; ssl.key = server.key

# Specifies a path prefix.
# If specified, all HTTP requests must begin with the given prefix;
# otherwise, the request is rejected.
# The default is / (no prefix).
; prefix = /cirun/

# If specified, require a username/password (using HTTP "Basic"
# authentication) and forbid access unless it matches the configured
# one.
; username = initech
; password = hunter2

# Multiple server sections may be specified;
# for example, you may configure one external server for HTML pages,
# and one internal server for receiving webhooks.
; [server.internal]
; ...


##############################################################################
# Repository options

# Multiple sections may be specified to apply settings to some number
# of repositories. Because settings are applied in the order they are
# specified, if more than one section matches a repository, settings
# in posterior sections override settings in anterior sections.

# A match-all "*" wildcard as the first section name can thus be used
# to specify default settings for all repositories.
; [repository.*]

# Command used to clone the repository.
# Invoked with the clone URL and "." as arguments.
# Default: ["git", "clone"]
; cloneCommand = ["git", "clone", "--depth=50"]

# Command used to checkout the tested commit.
# Invoked with the commit SHA1 as argument.
# Default: ["git", "checkout", "-qf"]
; checkoutCommand = ["/path/to/my-sparse-checkout-script"]

# File name of the CI script to run.
# By default, cirun looks for "cirun", ".cirun", "cirun.*", and
# ".cirun.*" (exactly one must exist).
; script = cirun

# A prefix can be specified to be added when running the test script.
# This can be used to specify an interpreter, define an environment,
# or enforce restrictions / isolation on the CI command.

# Example - run the CI script with a clean, minimal environment:
; execPrefix = ["env", "-i", "PATH=/usr/bin:/bin"]

# Example - run the CI script with a 10 minute timeout:
; execPrefix = ["timeout", "600"]

# Example - specify an interpreter (for systems which do not support
# shebang lines):
; execPrefix = ["C:\\Program Files\\Python38\\bin\\python.exe"]

# If you wish to use shell features, such as multiple commands,
# environment variables, or redirection, create a shell script and
# specify its path here.
#
# Example - throw away stdout, recording only stderr:
#   exec "$@" > /dev/null
#
# Example - limit virtual memory to 4GB:
#   ulimit -Sv $((4*1024*1024))
#   ulimit -Hv $((4*1024*1024))
#   exec "$@"
#
# Example - run the CI script with everything except the current
# directory read-only:
#   exec bwrap --ro-bind / / --dev /dev --proc /proc --bind "$PWD" "$PWD" "$@"
#
# Example - run the CI script in a Docker image:
#   exec docker run --rm -v "$PWD":/transmogrifier --workdir /transmogrifier initech/your-docker-image "$@"
#
; execPrefix = ["/path/to/my/wrapper/script.sh"]

# Wildcards can be used to apply settings to a number of repositories
# at once.
; [repository.initech/*]
; ...

# Repository-specific settings can be defined by adding a section for
# that repository.
; [repository.initech/transmogrifier]
; ...
